<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorCantGetEmail" xml:space="preserve">
    <value>Can't find email</value>
  </data>
  <data name="ErrorEmailInUse" xml:space="preserve">
    <value>Email is already in use</value>
  </data>
  <data name="ErrorEmailNotFound" xml:space="preserve">
    <value>Email not found</value>
  </data>
  <data name="ErrorEmailNotValid" xml:space="preserve">
    <value>Email address is not valid</value>
  </data>
  <data name="ErrorEmailOrPassword" xml:space="preserve">
    <value>Email or Password is invalid.</value>
  </data>
  <data name="ErrorEmailVerified" xml:space="preserve">
    <value>Email verified</value>
  </data>
  <data name="ErrorFieldRequired" xml:space="preserve">
    <value>This Field is Required</value>
  </data>
  <data name="ErrorPasswordLength" xml:space="preserve">
    <value>Password must be longer than 8 characters</value>
  </data>
  <data name="ErrorPasswordNotEqual" xml:space="preserve">
    <value>Password are not equal</value>
  </data>
  <data name="ErrorPasswordOldNotEqual" xml:space="preserve">
    <value>Old password is wrong</value>
  </data>
  <data name="ErrorPostInvalid" xml:space="preserve">
    <value>Post Invalid</value>
  </data>
  <data name="ErrorTokenExpired" xml:space="preserve">
    <value>Link is wrong or expired</value>
  </data>
  <data name="MessageEmailWasActive" xml:space="preserve">
    <value>Your email was active</value>
  </data>
  <data name="MessageSendedMail" xml:space="preserve">
    <value>Email verify was sended</value>
  </data>
  <data name="TextAccountNameDisplay" xml:space="preserve">
    <value>Account Name</value>
  </data>
  <data name="TextAccountResetPassSuccess" xml:space="preserve">
    <value>We was send a link for reset password to your email!</value>
  </data>
  <data name="TextAccountVerificationFailed" xml:space="preserve">
    <value>Account verification failed</value>
  </data>
  <data name="TextChangeEmail" xml:space="preserve">
    <value>Change Email</value>
  </data>
  <data name="TextChangePassword" xml:space="preserve">
    <value>Change Password</value>
  </data>
  <data name="TextConfirmPassword" xml:space="preserve">
    <value>Confirm Password</value>
  </data>
  <data name="TextEmailDisplay" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="TextEmailResetPasswordContent" xml:space="preserve">
    <value>You received this email because we received a request to reset your account password.</value>
  </data>
  <data name="TextEmailResetPasswordNote" xml:space="preserve">
    <value>The password reset link will expire in {0} minutes.
If you didn't ask for a password reset, you don't need to take any further action.</value>
  </data>
  <data name="TextEmailResetPasswordTitle" xml:space="preserve">
    <value>Notification about reset password</value>
  </data>
  <data name="TextEmailVerifyEmailContent" xml:space="preserve">
    <value>Please click the button below to verify your email address.</value>
  </data>
  <data name="TextEmailVerifyEmailNote" xml:space="preserve">
    <value>The email verification path will expire in {0} minutes.
If you don't ask, you don't need to take any further action.</value>
  </data>
  <data name="TextEmailVerifyEmailTitle" xml:space="preserve">
    <value>Verify your email</value>
  </data>
  <data name="TextForgotPassword" xml:space="preserve">
    <value>Forgot password?</value>
  </data>
  <data name="TextLogin" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="TextLoginWithFacebook" xml:space="preserve">
    <value>Login with Facebook</value>
  </data>
  <data name="TextLoginWithGoogle" xml:space="preserve">
    <value>Login with Google</value>
  </data>
  <data name="TextLogout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="TextNeedVerifyEmail1" xml:space="preserve">
    <value>You need verify Email first</value>
  </data>
  <data name="TextNeedVerifyEmail2" xml:space="preserve">
    <value>No email? </value>
  </data>
  <data name="TextNeedVerifyEmail3" xml:space="preserve">
    <value> to resend Email</value>
  </data>
  <data name="TextPasswordDisplay" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="TextPasswordOld" xml:space="preserve">
    <value>Old Password</value>
  </data>
  <data name="TextRegister" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="TextRegisterWithFacebook" xml:space="preserve">
    <value>Register with Facebook</value>
  </data>
  <data name="TextRegisterWithGoogle" xml:space="preserve">
    <value>Register with Gooogle</value>
  </data>
  <data name="TextRemember" xml:space="preserve">
    <value>Remember Me</value>
  </data>
  <data name="TextResetPassword" xml:space="preserve">
    <value>Reset Password</value>
  </data>
  <data name="TextResetPasswordButton" xml:space="preserve">
    <value>Send link reset password</value>
  </data>
  <data name="TextSendEmailLimit" xml:space="preserve">
    <value>Sent up to {0} emails / {1} minutes</value>
  </data>
  <data name="TextSendEmailResetPassword" xml:space="preserve">
    <value>Send link to email for reset password</value>
  </data>
  <data name="TextSendLinkAccuracy" xml:space="preserve">
    <value>Send link accuracy</value>
  </data>
  <data name="TextSendLinkEmail" xml:space="preserve">
    <value>We was send a accuracy link to your email</value>
  </data>
  <data name="TextWasSendLinkVerifyAccount" xml:space="preserve">
    <value>We have sent your account activation link to your email</value>
  </data>
</root>